<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" 
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- 
		静态资源配置
		http://zhlj11.iteye.com/blog/1772707
		http://www.cnblogs.com/luxh/archive/2013/03/14/2959207.html 
    静态资源不被拦截配置 -->
	<mvc:resources mapping="/js/**" location="/media/js/" />
	<mvc:resources mapping="/css/**" location="/media/css/" />
	<mvc:resources mapping="/images/**" location="/media/images/" />
	<mvc:resources mapping="/img/**" location="/media/img/" />
	<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
	
	<!-- <mvc:default-servlet-handler/> -->

	<!-- 
		http://blog.csdn.net/marila4720/article/details/9203813
		开启springmvc 的注解功能
		相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置
	 -->
	<mvc:annotation-driven />
	
	<!-- 
	http://blog.csdn.net/blue_it/article/details/12612533
	如果使用了context:component-scan 就不需要使用context:annotation-config
	
	<context:annotation-config/>
	向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 
	以及 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。
	注册这4个 BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解
	 -->
	
	<!--
	 	自动扫描控制层包 
	 	http://blog.sina.com.cn/s/blog_5114d71d0100rk7b.html
	 	http://my.oschina.net/luffyke/blog/31904
	-->
	<context:component-scan base-package="com.yourdomain">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 字符拦截器 解决 JavaWeb项目中的乱码问 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.yourdomain.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
</beans>